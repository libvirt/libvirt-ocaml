# ocaml-libvirt
# Copyright (C) 2007 Red Hat Inc., Richard W.M. Jones
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA

WIN32		= @WIN32@

CFLAGS		= @CFLAGS@ \
		   @LIBVIRT_CFLAGS@ \
		   -DCAML_NAME_SPACE \
		   -I.. \
		   -I"$(shell ocamlc -where)" \
		   @DEBUG@ @WARNINGS@ @CFLAGS_FPIC@
LDFLAGS		= @LDFLAGS@ \
		   @LIBVIRT_LIBS@
#		   -L"$(shell ocamlc -where)"

OCAMLC		= @OCAMLC@
OCAMLOPT	= @OCAMLOPT@
OCAMLFIND	= @OCAMLFIND@
OCAMLMKLIB	= @OCAMLMKLIB@
PERL		= @PERL@

ifneq ($(OCAMLFIND),)
OCAMLCPACKAGES	:= -package unix
OCAMLCFLAGS	:= -g -warn-error CDEFLMPSUVYZX-3 -safe-string
OCAMLCLIBS	:= -linkpkg
else
OCAMLCINCS	:=
OCAMLCFLAGS	:= -g -warn-error CDEFLMPSUVYZX-3 -safe-string
OCAMLCLIBS	:= unix.cma
endif

OCAMLOPTFLAGS	:= $(OCAMLCFLAGS)
ifneq ($(OCAMLFIND),)
OCAMLOPTPACKAGES := $(OCAMLCPACKAGES)
OCAMLOPTLIBS	:= $(OCAMLCLIBS)
else
OCAMLOPTINCS	:= $(OCAMLCINCS)
OCAMLOPTLIBS	:= unix.cmxa
endif

BYTE_TARGETS	:= mllibvirt.cma
OPT_TARGETS	:= mllibvirt.cmxa

all: $(BYTE_TARGETS)

opt: $(OPT_TARGETS)

COBJS := libvirt.cmo libvirt_version.cmo
OPTOBJS := libvirt.cmx libvirt_version.cmx

ifneq ($(OCAMLMKLIB),)
# Good, we can just use ocamlmklib
mllibvirt.cma: libvirt_c.o $(COBJS)
	$(OCAMLMKLIB) -o mllibvirt $^ $(LDFLAGS)

mllibvirt.cmxa: libvirt_c.o $(OPTOBJS)
	$(OCAMLMKLIB) -o mllibvirt $^ $(LDFLAGS)

else
ifeq ($(WIN32),yes)
# Ugh, MinGW doesn't have ocamlmklib.  This technique is copied from the
# example in OCaml distribution, otherlibs/win32unix/Makefile.nt

mllibvirt.cma: dllmllibvirt.dll libmllibvirt.a $(COBJS)
	$(OCAMLC) -a -linkall -o $@ $(COBJS) \
	  -dllib -lmllibvirt -cclib -lmllibvirt -cclib "$(LDFLAGS)"

mllibvirt.cmxa: libmllibvirt.a $(OPTOBJS)
	$(OCAMLOPT) -a -linkall -o $@ $(OPTOBJS) \
	  -cclib -lmllibvirt -cclib "$(LDFLAGS)"

dllmllibvirt.dll: libvirt_c.o
	$(CC) -shared -o $@ $^ \
	  $(LDFLAGS) "$(shell ocamlc -where)"/ocamlrun.a

libmllibvirt.a: libvirt_c.o
	ar rc $@ $^
	ranlib $@

else
# Don't know how to build a library on this platform.
$(BYTE_TARGETS) $(OPT_TARGETS):
	echo "Error: ocamlmklib missing, and no known way to build libraries on this platform"
	exit 1
endif
endif

# Automatically generate the C code from a Perl script 'generator.pl'.
libvirt_c.c: generator.pl
	$(PERL) -w $<

# Extra dependencies.
libvirt_c.c: libvirt_c.h
libvirt_c.c: libvirt_c_oneoffs.c
libvirt_c.c: libvirt_c_epilogue.c

# Status of automatically generated bindings.
autostatus: libvirt_c.c
	@echo -n "Functions which have manual bindings:    "
	@grep ^ocaml_libvirt_ libvirt_c_oneoffs.c  | wc -l
	@echo -n "Functions which have automatic bindings: "
	@grep ^ocaml_libvirt_ libvirt_c.c  | wc -l
	@echo -n "LOC in manual bindings:    "
	@wc -l < libvirt_c_oneoffs.c
	@echo -n "LOC in automatic bindings: "
	@wc -l < libvirt_c.c


install-byte:
	ocamlfind install $(OCAMLFIND_INSTFLAGS) -ldconf ignore libvirt \
	  ../META *.so *.a *.cma *.cmi *.mli

install-opt:
	ocamlfind install $(OCAMLFIND_INSTFLAGS) -ldconf ignore libvirt \
	  ../META *.so *.a *.cma *.cmx *.cmxa *.cmi *.mli

include ../Make.rules
